{"version":3,"sources":["logo.svg","components/AyahList.js","components/SurahList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","AyahList","props","state","surahNumber","match","params","url","fetch","then","response","json","setState","ayahs","data","this","map","ayah","key","number","numberInSurah","text","Component","displayName","name","SurahList","surahs","references","surah","to","App","className","href","path","render","component","src","logo","alt","target","rel","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sHAAAA,EAAOC,QAAU,IAA0B,kC,yNCE9BC,EAAb,kDAGE,WAAYC,GAAQ,IAAD,uBAEjB,cAAMA,IACDC,MAAQ,CAAEC,YAAaF,EAAMG,MAAMC,OAAOF,aAC/C,IAAMG,EAAM,qCAAuC,EAAKJ,MAAMC,YAJ7C,OAMjBI,MAAMD,GACLE,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACE,GACL,EAAKC,SAAS,CACZC,MAAOF,EAAKG,KAAKD,WAZJ,EAHrB,qDAsBI,GAAgC,iBAArBE,KAAKZ,MAAMU,OAAqD,MAApBE,KAAKZ,MAAMU,MAEhE,OAAO,KAGT,IAAIA,EAAQE,KAAKZ,MAAMU,MAAMG,KAAI,SAACC,EAAMC,GAAP,OAC/B,wBAAIA,IAAKD,EAAKE,QAASF,EAAKG,cAA5B,IAA4CH,EAAKI,SAGnD,OACE,6BACE,sCAAYN,KAAKZ,MAAMgB,QACtBN,OAlCT,GAA8BS,aAAjBrB,EACJsB,YAActB,EAASuB,K,YCAnBC,EAAb,kDAGE,WAAYvB,GAAQ,IAAD,uBAEjB,cAAMA,IACDC,MAAQ,GAHI,OAOjBK,MAHY,oCAIXC,MAAK,SAACC,GACN,OAAOA,EAASC,UAEhBF,MAAK,SAACE,GACL,EAAKC,SAAS,CACZc,OAAQf,EAAKG,KAAKY,OAAOC,gBAbZ,EAHrB,qDAuBI,GAAiC,iBAAtBZ,KAAKZ,MAAMuB,QAAuD,MAArBX,KAAKZ,MAAMuB,OAEjE,OAAO,KAGT,IAAIA,EAASX,KAAKZ,MAAMuB,OAAOV,KAAI,SAACY,EAAOV,GAAR,OACjC,kBAAC,IAAD,CAAMW,GAAI,SAAWD,EAAMT,QAAQ,wBAAID,IAAKU,EAAMT,QAASS,EAAMT,OAA9B,IAAuCS,EAAMJ,UAGlF,OACE,6BACE,4BACCE,QAnCT,GAA+BJ,aAAlBG,EACJF,YAAcE,EAAUD,K,WCwClBM,MArCf,WACE,OACE,yBAAKC,UAAU,OAEf,kBAAC,IAAD,KACI,8BACE,6BACE,4BACE,4BAAI,uBAAGC,KAAK,KAAR,SACJ,4BAAI,uBAAGA,KAAK,UAAR,YAIR,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAQ,kBAAM,2CAC9B,kBAAC,IAAD,CAAOD,KAAK,SAASE,UAAWV,IAChC,kBAAC,IAAD,CAAOQ,KAAK,qBAAqBE,UAAWlC,MAIhD,4BAAQ8B,UAAU,cAChB,yBAAKK,IAAKC,IAAMN,UAAU,WAAWO,IAAI,SACzC,mCACO,4CADP,wBAGA,uBACEP,UAAU,WACVC,KAAK,sBACLO,OAAO,SACPC,IAAI,uBAJN,kBCnBYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASvC,MACvB,2DCZNwC,IAASX,OACP,kBAAC,IAAMY,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1C,MAAK,SAAA2C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8e490bc9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\n\nexport class AyahList extends Component {\n  static displayName = AyahList.name;\n\n  constructor(props) {\n    //load surah names\n    super(props);\n    this.state = { surahNumber: props.match.params.surahNumber };\n    const url = \"http://api.alquran.cloud/v1/surah/\" + this.state.surahNumber;\n\n    fetch(url)\n    .then((response) => {\n      return response.json();\n    })\n    .then((json) => {\n      this.setState({\n        ayahs: json.data.ayahs\n      });\n\n    });\n  }\n\n  render() {\n    if (typeof(this.state.ayahs) == typeof('undefined') || this.state.ayahs == null)\n    {\n      return null;\n    }\n\n    var ayahs = this.state.ayahs.map((ayah, key) => \n      <li key={ayah.number}>{ayah.numberInSurah} {ayah.text}</li>\n    );\n\n    return (\n      <div>\n        <h1>Surah #{this.state.number}</h1>\n        {ayahs}\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nexport class SurahList extends Component {\n  static displayName = SurahList.name;\n\n  constructor(props) {\n    //load surah names\n    super(props);\n    this.state = {};\n    const url = \"http://api.alquran.cloud/v1/meta\";\n\n\n    fetch(url)\n    .then((response) => {\n     return response.json();\n    })\n    .then((json) => {\n      this.setState({\n        surahs: json.data.surahs.references\n      });\n\n    });\n  }\n\n  render() {\n    if (typeof(this.state.surahs) == typeof('undefined') || this.state.surahs == null)\n    {\n      return null;\n    }\n\n    var surahs = this.state.surahs.map((surah, key) => \n      <Link to={\"/ayah/\" + surah.number}><li key={surah.number}>{surah.number} {surah.name}</li></Link>\n    );\n\n    return (\n      <div>\n        <ul>\n        {surahs}\n        </ul>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { AyahList } from './components/AyahList';\nimport { SurahList } from './components/SurahList';\nimport { BrowserRouter, Route } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\n    <BrowserRouter>\n        <main>\n          <nav>\n            <ul>\n              <li><a href=\"/\">Home</a></li>\n              <li><a href=\"/surah\">Surah</a></li>\n            </ul>\n          </nav>\n\n          <Route path=\"/\" render={() => <h1>Welcome!</h1>} />\n          <Route path=\"/surah\" component={SurahList} />\n          <Route path=\"/ayah/:surahNumber\" component={AyahList} />\n        </main>\n    </BrowserRouter>\n\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}